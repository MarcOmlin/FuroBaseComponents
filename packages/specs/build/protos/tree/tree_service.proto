// Code generated by furo-proto-gen. DO NOT EDIT.
// generation date: 2019-08-15 18:51:55

syntax = "proto3";
package tree;

import "google/api/annotations.proto";

import "tree.proto";
import "tree_entity.proto";
import "tree_collection.proto";



// service specs for the tree api
service TreeService {                       
   
    // Creates a new Tree
    rpc CreateTreeService (CreateTreeServiceRequest) returns (TreeEntity){
        option (google.api.http) = {
            post: "/api/trees"
            body: "data"
        };
    }   
    // Delete a Tree
    rpc DeleteTreeService (DeleteTreeServiceRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/api/trees/{var}"
            
        };
    }   
    // The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
    rpc GetTreeService (GetTreeServiceRequest) returns (TreeEntity){
        option (google.api.http) = {
            get: "/api/trees/{var}"
            
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
    rpc ListTreeService (ListTreeServiceRequest) returns (TreeCollection){
        option (google.api.http) = {
            get: "/api/trees"
        };
    }   
    // Updates a Tree, partial updates are supported
    rpc UpdateTreeService (UpdateTreeServiceRequest) returns (TreeEntity){
        option (google.api.http) = {
            patch: "/api/trees/{var}"
            body: "data"
        };
    }
}


   
message CreateTreeServiceRequest { 
    
    Tree data =  1;  
}

message CreateTreeServiceResponse {
    repeated TreeEntity data= 1;
    furo.type.Meta meta = 2;
    repeated furo.type.Link links = 3;
}
   
message DeleteTreeServiceRequest { 
    
    string var = 1;
    google.protobuf.Empty data =  2;  
}

message DeleteTreeServiceResponse {
    repeated google.protobuf.Empty data= 1;
    furo.type.Meta meta = 2;
    repeated furo.type.Link links = 3;
}
   
message GetTreeServiceRequest { 
    
    string var = 1;
    google.protobuf.Empty data =  2;  
}

message GetTreeServiceResponse {
    repeated TreeEntity data= 1;
    furo.type.Meta meta = 2;
    repeated furo.type.Link links = 3;
}
   
message ListTreeServiceRequest { 
    
    //Partielle Repr채sentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gew체nschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta f체r die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgef체hrt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a tree
    string q = 11;
}

message ListTreeServiceResponse {
    repeated TreeCollection data= 1;
    furo.type.Meta meta = 2;
    repeated furo.type.Link links = 3;
}
   
message UpdateTreeServiceRequest { 
    
    string var = 1;
    Tree data =  2;  
}

message UpdateTreeServiceResponse {
    repeated TreeEntity data= 1;
    furo.type.Meta meta = 2;
    repeated furo.type.Link links = 3;
}
