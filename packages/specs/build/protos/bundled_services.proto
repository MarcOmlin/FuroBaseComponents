// Code generated by furo-proto-gen. DO NOT EDIT.
// generation date: 2019-08-15 16:41:55

syntax = "proto3";
package furo.type;
import "google/api/annotations.proto";
import "bundled_messages.proto";
import "google/protobuf/empty.proto";



// service specs for the project api
service project_serviceService {                       
   
    // Creates a new Project
    rpc Createproject_service (Createproject_serviceRequest) returns (ProjectEntity){
        option (google.api.http) = {
            post: "/api/projects"
            body: "data"
        };
    }   
    // Delete a Project
    rpc Deleteproject_service (Deleteproject_serviceRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/api/projects/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }   
    // The Get method takes zero or more parameters, and returns a ProjectEntity which contains a Project
    rpc Getproject_service (Getproject_serviceRequest) returns (ProjectEntity){
        option (google.api.http) = {
            get: "/api/projects/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a ProjectCollection of ProjectEntity that match the input parameters.
    rpc Listproject_service (Listproject_serviceRequest) returns (ProjectCollection){
        option (google.api.http) = {
            get: "/api/projects"
        };
    }   
    // Updates a Project, partial updates are supported
    rpc Updateproject_service (Updateproject_serviceRequest) returns (ProjectEntity){
        option (google.api.http) = {
            patch: "/api/projects/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }
}
   
message Createproject_serviceRequest { 
    
    Project data =  1;  
}

   
message Deleteproject_serviceRequest { 
    
    google.protobuf.Empty data =  1;  
}

   
message Getproject_serviceRequest { 
    
    google.protobuf.Empty data =  1;  
}

   
message Listproject_serviceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a project
    string q = 11;
}

   
message Updateproject_serviceRequest { 
    
    Project data =  1;  
}


// service specs for the person api
service person_serviceService {                       
   
    // Creates a new Person
    rpc Createperson_service (Createperson_serviceRequest) returns (PersonEntity){
        option (google.api.http) = {
            post: "/api/persons"
            body: "data"
        };
    }   
    // Delete a Person
    rpc Deleteperson_service (Deleteperson_serviceRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/api/persons/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }   
    // The Get method takes zero or more parameters, and returns a PersonEntity which contains a Person
    rpc Getperson_service (Getperson_serviceRequest) returns (PersonEntity){
        option (google.api.http) = {
            get: "/api/persons/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a PersonCollection of PersonEntity that match the input parameters.
    rpc Listperson_service (Listperson_serviceRequest) returns (PersonCollection){
        option (google.api.http) = {
            get: "/api/persons"
        };
    }   
    // Updates a Person, partial updates are supported
    rpc Updateperson_service (Updateperson_serviceRequest) returns (PersonEntity){
        option (google.api.http) = {
            patch: "/api/persons/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }
}
   
message Createperson_serviceRequest { 
    
    Person data =  1;  
}

   
message Deleteperson_serviceRequest { 
    
    google.protobuf.Empty data =  1;  
}

   
message Getperson_serviceRequest { 
    
    google.protobuf.Empty data =  1;  
}

   
message Listperson_serviceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a person
    string q = 11;
}

   
message Updateperson_serviceRequest { 
    
    Person data =  1;  
}


// The tasks of a given project
service project_task_serviceService {   

}

// service specs for the tree api
service tree_serviceService {                       
   
    // Creates a new Tree
    rpc Createtree_service (Createtree_serviceRequest) returns (TreeEntity){
        option (google.api.http) = {
            post: "/api/trees"
            body: "data"
        };
    }   
    // Delete a Tree
    rpc Deletetree_service (Deletetree_serviceRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/api/trees/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }   
    // The Get method takes zero or more parameters, and returns a TreeEntity which contains a Tree
    rpc Gettree_service (Gettree_serviceRequest) returns (TreeEntity){
        option (google.api.http) = {
            get: "/api/trees/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TreeCollection of TreeEntity that match the input parameters.
    rpc Listtree_service (Listtree_serviceRequest) returns (TreeCollection){
        option (google.api.http) = {
            get: "/api/trees"
        };
    }   
    // Updates a Tree, partial updates are supported
    rpc Updatetree_service (Updatetree_serviceRequest) returns (TreeEntity){
        option (google.api.http) = {
            patch: "/api/trees/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }
}
   
message Createtree_serviceRequest { 
    
    Tree data =  1;  
}

   
message Deletetree_serviceRequest { 
    
    google.protobuf.Empty data =  1;  
}

   
message Gettree_serviceRequest { 
    
    google.protobuf.Empty data =  1;  
}

   
message Listtree_serviceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a tree
    string q = 11;
}

   
message Updatetree_serviceRequest { 
    
    Tree data =  1;  
}


// The members of a project
service project_members_serviceService {           
   
    // Get a collection with PersonEntities
    rpc Listproject_members_service (Listproject_members_serviceRequest) returns (PersonCollection){
        option (google.api.http) = {
            get: "/api/members"
        };
    }   
    // Custom method to unsubscribe a member, complete PersonEntity is expected
    rpc Unsubscribeproject_members_service (Unsubscribeproject_members_serviceRequest) returns (PersonCollection){
        option (google.api.http) = {
            post: "/api/members/{prs}:unsubscribe"
            body: "data"
        };
    }
}
   
message Listproject_members_serviceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a member
    string q = 11;
}

   
message Unsubscribeproject_members_serviceRequest { 
    
    string prs = 1;
    PersonEntity data =  2;  
}


// service specs for the task api
service task_serviceService {                       
   
    // Creates a new Task
    rpc Createtask_service (Createtask_serviceRequest) returns (TaskEntity){
        option (google.api.http) = {
            post: "/api/tasks"
            body: "data"
        };
    }   
    // Delete a Task
    rpc Deletetask_service (Deletetask_serviceRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/api/tasks/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }   
    // The Get method takes zero or more parameters, and returns a TaskEntity which contains a Task
    rpc Gettask_service (Gettask_serviceRequest) returns (TaskEntity){
        option (google.api.http) = {
            get: "/api/tasks/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }   
    // The List method takes zero or more parameters as input, and returns a TaskCollection of TaskEntity that match the input parameters.
    rpc Listtask_service (Listtask_serviceRequest) returns (TaskCollection){
        option (google.api.http) = {
            get: "/api/tasks"
        };
    }   
    // Updates a Task, partial updates are supported
    rpc Updatetask_service (Updatetask_serviceRequest) returns (TaskEntity){
        option (google.api.http) = {
            patch: "/api/tasks/{REPLACE_THIS_WITH_YOUR_QUERY_PARAM}"
            body: "data"
        };
    }
}
   
message Createtask_serviceRequest { 
    
    Task data =  1;  
}

   
message Deletetask_serviceRequest { 
    
    google.protobuf.Empty data =  1;  
}

   
message Gettask_serviceRequest { 
    
    google.protobuf.Empty data =  1;  
}

   
message Listtask_serviceRequest { 
    
    //Partielle Repräsentation fields=id,name // 10
    string fields = 1;
    //Sortierung nach feldern
    //**?filter=-completed** um completed absteigend zu bekommen
    //**?filter=completed** um completed aufsteigend zu bekommen
    string sort = 2;
    //Filter
    string filter = 3;
    //Gewünschte Seite. Tipp: Folge dem HATEOAS next, prev,...
    int32 page = 4;
    //Anzahl Elemente pro Seite, maximal sind 99 erlaubt
    int32 limit = 5;
    //Meta für die Anzahl der Elemente der Resource, bei true ist in der Antwort Meta der count aufgeführt
    bool count = 6;
    //not implemented
    string sum = 7;
    //not implemented (ehemals context)
    string view = 8;       
       
    //Query term to search a task
    string q = 11;
}

   
message Updatetask_serviceRequest { 
    
    Task data =  1;  
}

