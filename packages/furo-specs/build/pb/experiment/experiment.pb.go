// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: experiment/experiment.proto

package experiment

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import furo "../furo"
import types "github.com/gogo/protobuf/types"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ExperimentEntity with Experiment
type ExperimentEntity struct {
	// contains a experiment.Experiment
	Data *Experiment `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	// Hateoas links
	Links []*furo.Link `protobuf:"bytes,2,rep,name=links" json:"links,omitempty"`
	// Meta for the response
	Meta                 *furo.Meta `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExperimentEntity) Reset()         { *m = ExperimentEntity{} }
func (m *ExperimentEntity) String() string { return proto.CompactTextString(m) }
func (*ExperimentEntity) ProtoMessage()    {}
func (*ExperimentEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_experiment_3fe7346e9c26a21f, []int{0}
}
func (m *ExperimentEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExperimentEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExperimentEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExperimentEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExperimentEntity.Merge(dst, src)
}
func (m *ExperimentEntity) XXX_Size() int {
	return m.Size()
}
func (m *ExperimentEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_ExperimentEntity.DiscardUnknown(m)
}

var xxx_messageInfo_ExperimentEntity proto.InternalMessageInfo

func (m *ExperimentEntity) GetData() *Experiment {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ExperimentEntity) GetLinks() []*furo.Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *ExperimentEntity) GetMeta() *furo.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

// experiment spec for testing
type Experiment struct {
	// Short experiment description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Localized String representation of a experiment
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// field for furo-data-bool-icon for testing
	FuroDataBoolIcon bool `protobuf:"varint,14,opt,name=furo_data_bool_icon,json=furoDataBoolIcon,proto3" json:"furo_data_bool_icon,omitempty"`
	// field for furo_data_checkbox_input for testing
	FuroDataCheckboxInput bool `protobuf:"varint,4,opt,name=furo_data_checkbox_input,json=furoDataCheckboxInput,proto3" json:"furo_data_checkbox_input,omitempty"`
	// field for furo-data-color-input for testing
	FuroDataColorInput string `protobuf:"bytes,10,opt,name=furo_data_color_input,json=furoDataColorInput,proto3" json:"furo_data_color_input,omitempty"`
	// field for furo-data-date-input for testing
	FuroDataDateInput string `protobuf:"bytes,13,opt,name=furo_data_date_input,json=furoDataDateInput,proto3" json:"furo_data_date_input,omitempty"`
	// field for furo-data-number-input for testing
	FuroDataNumberInput float32 `protobuf:"fixed32,9,opt,name=furo_data_number_input,json=furoDataNumberInput,proto3" json:"furo_data_number_input,omitempty"`
	// field for furo-data-password-input for testing
	FuroDataPasswordInput string `protobuf:"bytes,11,opt,name=furo_data_password_input,json=furoDataPasswordInput,proto3" json:"furo_data_password_input,omitempty"`
	// field for furo-data-range-input for testing
	FuroDataRangeInput string `protobuf:"bytes,8,opt,name=furo_data_range_input,json=furoDataRangeInput,proto3" json:"furo_data_range_input,omitempty"`
	// field for furo-search-input for testing
	FuroDataSearchInput string `protobuf:"bytes,12,opt,name=furo_data_search_input,json=furoDataSearchInput,proto3" json:"furo_data_search_input,omitempty"`
	// field for furo_data_text_input for testing
	FuroDataTextInput string `protobuf:"bytes,5,opt,name=furo_data_text_input,json=furoDataTextInput,proto3" json:"furo_data_text_input,omitempty"`
	// field for furo_data_textarea_input for testing
	FuroDataTextareaInput string `protobuf:"bytes,6,opt,name=furo_data_textarea_input,json=furoDataTextareaInput,proto3" json:"furo_data_textarea_input,omitempty"`
	// field for furo-data-time-input for testing
	FuroDataTimeInput string `protobuf:"bytes,7,opt,name=furo_data_time_input,json=furoDataTimeInput,proto3" json:"furo_data_time_input,omitempty"`
	// Identity of a experiment
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// field for testing any
	TheAnyType           *types.Any `protobuf:"bytes,15,opt,name=the_any_type,json=theAnyType" json:"the_any_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Experiment) Reset()         { *m = Experiment{} }
func (m *Experiment) String() string { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()    {}
func (*Experiment) Descriptor() ([]byte, []int) {
	return fileDescriptor_experiment_3fe7346e9c26a21f, []int{1}
}
func (m *Experiment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Experiment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Experiment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Experiment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Experiment.Merge(dst, src)
}
func (m *Experiment) XXX_Size() int {
	return m.Size()
}
func (m *Experiment) XXX_DiscardUnknown() {
	xxx_messageInfo_Experiment.DiscardUnknown(m)
}

var xxx_messageInfo_Experiment proto.InternalMessageInfo

func (m *Experiment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Experiment) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Experiment) GetFuroDataBoolIcon() bool {
	if m != nil {
		return m.FuroDataBoolIcon
	}
	return false
}

func (m *Experiment) GetFuroDataCheckboxInput() bool {
	if m != nil {
		return m.FuroDataCheckboxInput
	}
	return false
}

func (m *Experiment) GetFuroDataColorInput() string {
	if m != nil {
		return m.FuroDataColorInput
	}
	return ""
}

func (m *Experiment) GetFuroDataDateInput() string {
	if m != nil {
		return m.FuroDataDateInput
	}
	return ""
}

func (m *Experiment) GetFuroDataNumberInput() float32 {
	if m != nil {
		return m.FuroDataNumberInput
	}
	return 0
}

func (m *Experiment) GetFuroDataPasswordInput() string {
	if m != nil {
		return m.FuroDataPasswordInput
	}
	return ""
}

func (m *Experiment) GetFuroDataRangeInput() string {
	if m != nil {
		return m.FuroDataRangeInput
	}
	return ""
}

func (m *Experiment) GetFuroDataSearchInput() string {
	if m != nil {
		return m.FuroDataSearchInput
	}
	return ""
}

func (m *Experiment) GetFuroDataTextInput() string {
	if m != nil {
		return m.FuroDataTextInput
	}
	return ""
}

func (m *Experiment) GetFuroDataTextareaInput() string {
	if m != nil {
		return m.FuroDataTextareaInput
	}
	return ""
}

func (m *Experiment) GetFuroDataTimeInput() string {
	if m != nil {
		return m.FuroDataTimeInput
	}
	return ""
}

func (m *Experiment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Experiment) GetTheAnyType() *types.Any {
	if m != nil {
		return m.TheAnyType
	}
	return nil
}

// Test the default value
type Default struct {
	// Short experiment description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Localized String representation of a experiment
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Identity of a experiment
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// repeated string
	Repstring            []string `protobuf:"bytes,4,rep,name=repstring" json:"repstring,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Default) Reset()         { *m = Default{} }
func (m *Default) String() string { return proto.CompactTextString(m) }
func (*Default) ProtoMessage()    {}
func (*Default) Descriptor() ([]byte, []int) {
	return fileDescriptor_experiment_3fe7346e9c26a21f, []int{2}
}
func (m *Default) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Default) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Default.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Default) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Default.Merge(dst, src)
}
func (m *Default) XXX_Size() int {
	return m.Size()
}
func (m *Default) XXX_DiscardUnknown() {
	xxx_messageInfo_Default.DiscardUnknown(m)
}

var xxx_messageInfo_Default proto.InternalMessageInfo

func (m *Default) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Default) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Default) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Default) GetRepstring() []string {
	if m != nil {
		return m.Repstring
	}
	return nil
}

// ExperimentCollection with repeated ExperimentEntity
type ExperimentCollection struct {
	// Contains a experiment.ExperimentEntity repeated
	Entities []*ExperimentEntity `protobuf:"bytes,4,rep,name=entities" json:"entities,omitempty"`
	// Hateoas links
	Links []*furo.Link `protobuf:"bytes,3,rep,name=links" json:"links,omitempty"`
	// Meta for the response
	Meta                 *furo.Meta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExperimentCollection) Reset()         { *m = ExperimentCollection{} }
func (m *ExperimentCollection) String() string { return proto.CompactTextString(m) }
func (*ExperimentCollection) ProtoMessage()    {}
func (*ExperimentCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_experiment_3fe7346e9c26a21f, []int{3}
}
func (m *ExperimentCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExperimentCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExperimentCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExperimentCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExperimentCollection.Merge(dst, src)
}
func (m *ExperimentCollection) XXX_Size() int {
	return m.Size()
}
func (m *ExperimentCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_ExperimentCollection.DiscardUnknown(m)
}

var xxx_messageInfo_ExperimentCollection proto.InternalMessageInfo

func (m *ExperimentCollection) GetEntities() []*ExperimentEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ExperimentCollection) GetLinks() []*furo.Link {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *ExperimentCollection) GetMeta() *furo.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*ExperimentEntity)(nil), "experiment.ExperimentEntity")
	proto.RegisterType((*Experiment)(nil), "experiment.Experiment")
	proto.RegisterType((*Default)(nil), "experiment.Default")
	proto.RegisterType((*ExperimentCollection)(nil), "experiment.ExperimentCollection")
}
func (m *ExperimentEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExperimentEntity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Links) > 0 {
		for _, msg := range m.Links {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExperiment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Meta != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Experiment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Experiment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.FuroDataCheckboxInput {
		dAtA[i] = 0x20
		i++
		if m.FuroDataCheckboxInput {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FuroDataTextInput) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.FuroDataTextInput)))
		i += copy(dAtA[i:], m.FuroDataTextInput)
	}
	if len(m.FuroDataTextareaInput) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.FuroDataTextareaInput)))
		i += copy(dAtA[i:], m.FuroDataTextareaInput)
	}
	if len(m.FuroDataTimeInput) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.FuroDataTimeInput)))
		i += copy(dAtA[i:], m.FuroDataTimeInput)
	}
	if len(m.FuroDataRangeInput) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.FuroDataRangeInput)))
		i += copy(dAtA[i:], m.FuroDataRangeInput)
	}
	if m.FuroDataNumberInput != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FuroDataNumberInput))))
		i += 4
	}
	if len(m.FuroDataColorInput) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.FuroDataColorInput)))
		i += copy(dAtA[i:], m.FuroDataColorInput)
	}
	if len(m.FuroDataPasswordInput) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.FuroDataPasswordInput)))
		i += copy(dAtA[i:], m.FuroDataPasswordInput)
	}
	if len(m.FuroDataSearchInput) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.FuroDataSearchInput)))
		i += copy(dAtA[i:], m.FuroDataSearchInput)
	}
	if len(m.FuroDataDateInput) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.FuroDataDateInput)))
		i += copy(dAtA[i:], m.FuroDataDateInput)
	}
	if m.FuroDataBoolIcon {
		dAtA[i] = 0x70
		i++
		if m.FuroDataBoolIcon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TheAnyType != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(m.TheAnyType.Size()))
		n3, err := m.TheAnyType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Default) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Default) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Repstring) > 0 {
		for _, s := range m.Repstring {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExperimentCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExperimentCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExperiment(dAtA, i, uint64(m.Meta.Size()))
		n4, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Links) > 0 {
		for _, msg := range m.Links {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintExperiment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Entities) > 0 {
		for _, msg := range m.Entities {
			dAtA[i] = 0x22
			i++
			i = encodeVarintExperiment(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintExperiment(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExperimentEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovExperiment(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovExperiment(uint64(l))
		}
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovExperiment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Experiment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	if m.FuroDataCheckboxInput {
		n += 2
	}
	l = len(m.FuroDataTextInput)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.FuroDataTextareaInput)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.FuroDataTimeInput)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.FuroDataRangeInput)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	if m.FuroDataNumberInput != 0 {
		n += 5
	}
	l = len(m.FuroDataColorInput)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.FuroDataPasswordInput)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.FuroDataSearchInput)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.FuroDataDateInput)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	if m.FuroDataBoolIcon {
		n += 2
	}
	if m.TheAnyType != nil {
		l = m.TheAnyType.Size()
		n += 1 + l + sovExperiment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Default) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovExperiment(uint64(l))
	}
	if len(m.Repstring) > 0 {
		for _, s := range m.Repstring {
			l = len(s)
			n += 1 + l + sovExperiment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExperimentCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovExperiment(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovExperiment(uint64(l))
		}
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovExperiment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExperiment(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExperiment(x uint64) (n int) {
	return sovExperiment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExperimentEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExperiment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExperimentEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExperimentEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Experiment{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &furo.Link{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &furo.Meta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExperiment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExperiment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Experiment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExperiment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Experiment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Experiment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataCheckboxInput", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FuroDataCheckboxInput = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataTextInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuroDataTextInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataTextareaInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuroDataTextareaInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataTimeInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuroDataTimeInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataRangeInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuroDataRangeInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataNumberInput", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FuroDataNumberInput = float32(math.Float32frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataColorInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuroDataColorInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataPasswordInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuroDataPasswordInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataSearchInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuroDataSearchInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataDateInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuroDataDateInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuroDataBoolIcon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FuroDataBoolIcon = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheAnyType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TheAnyType == nil {
				m.TheAnyType = &types.Any{}
			}
			if err := m.TheAnyType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExperiment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExperiment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Default) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExperiment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Default: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Default: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repstring", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repstring = append(m.Repstring, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExperiment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExperiment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExperimentCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExperiment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExperimentCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExperimentCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &furo.Meta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &furo.Link{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExperiment
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &ExperimentEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExperiment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExperiment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExperiment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExperiment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExperiment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExperiment
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExperiment
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExperiment(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExperiment = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExperiment   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("experiment/experiment.proto", fileDescriptor_experiment_3fe7346e9c26a21f)
}

var fileDescriptor_experiment_3fe7346e9c26a21f = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x86, 0x65, 0x27, 0xfd, 0xc8, 0x38, 0xb4, 0xc5, 0xfd, 0x90, 0x81, 0x2a, 0x32, 0x39, 0x45,
	0x48, 0x38, 0xa2, 0x95, 0x80, 0x6b, 0xbf, 0x0e, 0x95, 0xa0, 0x42, 0xa6, 0x77, 0x6b, 0x63, 0x4f,
	0x93, 0x55, 0xec, 0x5d, 0xcb, 0xde, 0x88, 0x58, 0xe2, 0xc0, 0x6f, 0xe0, 0x57, 0x71, 0xe4, 0xc4,
	0x19, 0xe5, 0x97, 0xa0, 0x5d, 0xaf, 0xb3, 0x0d, 0x32, 0x47, 0x6e, 0xf6, 0xbc, 0xf3, 0xec, 0x3b,
	0x1a, 0xed, 0xbb, 0xf0, 0x02, 0x97, 0x39, 0x16, 0x34, 0x43, 0x26, 0xc6, 0xe6, 0x33, 0xc8, 0x0b,
	0x2e, 0xb8, 0x0b, 0xa6, 0xf2, 0x7c, 0xff, 0x61, 0x51, 0xf0, 0x71, 0x86, 0x82, 0xd4, 0xa2, 0x2e,
	0xa4, 0x94, 0xcd, 0x75, 0xe1, 0xd9, 0x94, 0xf3, 0x69, 0x8a, 0x63, 0xf5, 0x37, 0x59, 0x3c, 0x8c,
	0x09, 0xab, 0x6a, 0x69, 0xf8, 0xcd, 0x82, 0x83, 0x9b, 0xf5, 0x59, 0x37, 0x4c, 0x50, 0x51, 0xb9,
	0xaf, 0xa0, 0x9b, 0x10, 0x41, 0x3c, 0xcb, 0xb7, 0x46, 0xce, 0xd9, 0x49, 0xf0, 0xc8, 0xde, 0xf4,
	0x86, 0xaa, 0xc7, 0xf5, 0x61, 0x4b, 0x3a, 0x95, 0x9e, 0xed, 0x77, 0x46, 0xce, 0x19, 0x04, 0xd2,
	0x3c, 0xf8, 0x40, 0xd9, 0x3c, 0xac, 0x05, 0x77, 0x00, 0x5d, 0x39, 0x9c, 0xd7, 0x51, 0xa7, 0xe9,
	0x86, 0x8f, 0x28, 0x48, 0xa8, 0xea, 0xc3, 0x5f, 0x5b, 0x00, 0xe6, 0x58, 0x77, 0x0f, 0x6c, 0x9a,
	0x28, 0xeb, 0x5e, 0x68, 0xd3, 0xc4, 0x7d, 0x09, 0xfd, 0x84, 0x96, 0x79, 0x4a, 0xaa, 0x88, 0x91,
	0x0c, 0x3d, 0x5b, 0x29, 0x8e, 0xae, 0xdd, 0x91, 0x0c, 0x5d, 0x1f, 0x9c, 0x04, 0xcb, 0xb8, 0xa0,
	0xb9, 0xa0, 0x9c, 0x29, 0x23, 0xd9, 0x61, 0x4a, 0xee, 0x3b, 0xf0, 0xa4, 0x6d, 0x24, 0x47, 0x8e,
	0xe2, 0x19, 0xc6, 0xf3, 0x09, 0x5f, 0x46, 0x94, 0xe5, 0x0b, 0xe1, 0x75, 0x7d, 0x6b, 0xb4, 0x1b,
	0x1e, 0x4b, 0xfd, 0x9a, 0x08, 0x72, 0xa5, 0xd5, 0x5b, 0x29, 0xba, 0x63, 0x38, 0x32, 0xa0, 0xc0,
	0xa5, 0xd0, 0xd0, 0x96, 0xf2, 0x78, 0xda, 0x40, 0xf7, 0xb8, 0x14, 0x35, 0xb0, 0xe1, 0x24, 0x01,
	0x52, 0x20, 0xd1, 0xd0, 0xb6, 0x82, 0x8e, 0x1f, 0x43, 0x52, 0x6d, 0x73, 0xa2, 0x19, 0x6a, 0x68,
	0xe7, 0x2f, 0x27, 0x9a, 0x61, 0x0d, 0xbc, 0x81, 0x63, 0x03, 0x14, 0x84, 0x4d, 0x1b, 0x62, 0x57,
	0x11, 0x6e, 0x43, 0x84, 0x52, 0xaa, 0x91, 0x73, 0x38, 0x31, 0x08, 0x5b, 0x64, 0x13, 0x2c, 0x34,
	0xd3, 0xf3, 0xad, 0x91, 0x1d, 0x1e, 0x36, 0xcc, 0x9d, 0xd2, 0x5a, 0x7c, 0x62, 0x9e, 0xf2, 0x86,
	0x81, 0x4d, 0x9f, 0x2b, 0x29, 0xb5, 0x2c, 0x21, 0x27, 0x65, 0xf9, 0x85, 0x17, 0x89, 0xa6, 0x9c,
	0xcd, 0x25, 0x7c, 0xd2, 0x6a, 0xcb, 0x80, 0x25, 0x92, 0x22, 0x9e, 0x69, 0xac, 0xaf, 0xb0, 0xf5,
	0x80, 0x9f, 0x95, 0xd6, 0xb2, 0xb9, 0x84, 0x88, 0x66, 0x0f, 0x4f, 0x36, 0x37, 0x77, 0x4d, 0x84,
	0x5e, 0xc3, 0x6b, 0x38, 0x34, 0xc0, 0x84, 0xf3, 0x34, 0xa2, 0x31, 0x67, 0xde, 0x9e, 0xba, 0x08,
	0x07, 0x4d, 0xff, 0x25, 0xe7, 0xe9, 0x6d, 0xcc, 0x99, 0xfb, 0x16, 0xfa, 0x62, 0x86, 0x11, 0x61,
	0x55, 0x24, 0xaa, 0x1c, 0xbd, 0x7d, 0x75, 0x91, 0x8f, 0x82, 0x3a, 0x55, 0x41, 0x93, 0xaa, 0xe0,
	0x82, 0x55, 0x21, 0x88, 0x19, 0x5e, 0xb0, 0xea, 0xbe, 0xca, 0x71, 0xf8, 0x15, 0x76, 0xae, 0xf1,
	0x81, 0x2c, 0xd2, 0xff, 0x74, 0xa9, 0x4f, 0xa1, 0x57, 0x60, 0x5e, 0x8a, 0x82, 0xb2, 0xa9, 0xd7,
	0xf5, 0x3b, 0xa3, 0x5e, 0x68, 0x0a, 0xc3, 0xef, 0x16, 0x1c, 0x99, 0x58, 0x5d, 0xf1, 0x34, 0xc5,
	0x58, 0x61, 0x4d, 0x1e, 0xed, 0xf6, 0x3c, 0x9a, 0x44, 0x77, 0xfe, 0x95, 0xe8, 0xf7, 0xb0, 0x8b,
	0xf2, 0xa5, 0xa0, 0x58, 0x2a, 0x5f, 0xe7, 0xec, 0xb4, 0xfd, 0x8d, 0xa8, 0xdf, 0x93, 0x70, 0xdd,
	0x7d, 0xd9, 0xff, 0xb1, 0x1a, 0x58, 0x3f, 0x57, 0x03, 0xeb, 0xf7, 0x6a, 0x60, 0x4d, 0xb6, 0xd5,
	0xea, 0xce, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x41, 0x5b, 0xdb, 0x49, 0xeb, 0x04, 0x00, 0x00,
}
