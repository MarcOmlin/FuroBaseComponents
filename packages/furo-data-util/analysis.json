{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "With `default-value` you can set a default value in a declarative way.\n\n```\n<default-value default-value=\"view1\" input=\"[[routeData.page]]\" output=\"{{page}}\"></default-value>\n```\n\nYou can use `default-value` also as an **or** condition for a value (`input || default-value`).",
      "summary": "Set a default value",
      "path": "default-value.js",
      "properties": [
        {
          "name": "input",
          "type": "Object | null | undefined",
          "description": "If this value is not set or falsy, the default-value is used.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 23,
              "column": 48
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_setOut\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "defaultValue",
          "type": "Object | null | undefined",
          "description": "The default value which is used when input is falsy",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 55
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_setOut\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "output",
          "type": "Object | null | undefined",
          "description": "The output",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 42
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "setDefault",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setOut",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "DefaultValue",
      "attributes": [
        {
          "name": "input",
          "description": "If this value is not set or falsy, the default-value is used.",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 23,
              "column": 48
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "default-value",
          "description": "The default value which is used when input is falsy",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 55
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "output",
          "description": "The output",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 42
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "output-changed",
          "description": "Fired when the `output` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "default-value"
    },
    {
      "description": "`remember-default`\nErinnert sich an einen überschriebenen Default wert und setzt diesen nach dem zweiten aufruf",
      "summary": "remembers a overwritten default value",
      "path": "remember-default.js",
      "properties": [
        {
          "name": "value",
          "type": "string | null | undefined",
          "description": "value\nWert der gesichert werden soll, ACHTUNG STRING",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_checkDefault\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "identifier",
          "type": "string | null | undefined",
          "description": "identifier\nIdentifier for the default value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_checkDefault",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 62,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "factoryReset",
          "description": "Resets to default value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 69,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "RememberDefault",
      "attributes": [
        {
          "name": "value",
          "description": "value\nWert der gesichert werden soll, ACHTUNG STRING",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "identifier",
          "description": "identifier\nIdentifier for the default value",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "remember-default",
      "mixins": [
        "FBP"
      ]
    },
    {
      "description": "`object-appender`\n\nHängt an ein objekt ein anderes Objekt unter dem Property welches unter as definiert wurde ab.\n\n## Beispiel\n`qp` wird dem Objekt `context` unter dem Attribut `queryParams` angehängt.\n`context` sollte nacher unter `context.queryParam` den Inhalt von `qp` haben.\n\n```\n <object-appender append=\"[[qp]]\" as=\"queryParams\" to=\"{{context}}\"></object-appender>\n```",
      "summary": "",
      "path": "object-appender.js",
      "properties": [
        {
          "name": "appendObject",
          "type": "Object | null | undefined",
          "description": "append\nObjekt das angehängt werden soll",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "appendObjectPath",
          "type": "string | null | undefined",
          "description": "Teil des appendObjects der angehängt werden soll.\n\nWenn appendObject `{collection:{data:12}}` ist und nur `data` angehängt werden soll, ist der Pfad: `collection.data`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "as",
          "type": "string | null | undefined",
          "description": "as\nSubkey oder Attribut an dem das Objekt angehängt werden soll",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "to",
          "type": "Object | null | undefined",
          "description": "to\nZielobjekt an dem das Objekt angehänt wird",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "append",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_append",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 2
            },
            "end": {
              "line": 82,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "append"
            },
            {
              "name": "as"
            },
            {
              "name": "to"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 21,
          "column": 0
        },
        "end": {
          "line": 84,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "ObjectAppender",
      "attributes": [
        {
          "name": "append-object",
          "description": "append\nObjekt das angehängt werden soll",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "append-object-path",
          "description": "Teil des appendObjects der angehängt werden soll.\n\nWenn appendObject `{collection:{data:12}}` ist und nur `data` angehängt werden soll, ist der Pfad: `collection.data`",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 39,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "as",
          "description": "as\nSubkey oder Attribut an dem das Objekt angehängt werden soll",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "to",
          "description": "to\nZielobjekt an dem das Objekt angehänt wird",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "to-changed",
          "description": "Fired when the `to` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "object-appender"
    },
    {
      "description": "`map-struct`\nMapping Komponente für Objekte und Array von Objekten. Das Mapping kann über map-struct-item deklarativ erstellt\nwerden.\n\n´´´\n<map-struct source=[[object]]\" target=\"{{result}}\" withWildcard ƒ-map=\"\" @-object-mapped=\"\">\n\n    <map-struct-item source=\"iconCode\" target=\"icon\">\n    <map-struct-item source=\"label\" target=\"menulabel\">\n    <map-struct-item source=\"value.action\" target=\"href\">\n\n</map-struct>\n´´´",
      "summary": "",
      "path": "map-struct.js",
      "properties": [
        {
          "name": "source",
          "type": "Object | null | undefined",
          "description": "Source object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "target",
          "type": "Object | null | undefined",
          "description": "Mapped object",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "mappingConfig",
          "type": "Array | null | undefined",
          "description": "Eine config kann auch direkt übergeben werden\nGeeignet für dynamische item Mappings\n\n```\n[\n {\n    \"source\": \"name\",\n    \"target\": \"headline\"\n },\n]\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 55,
              "column": 61
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_addConfigMap\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "withWildcard",
          "type": "boolean | null | undefined",
          "description": "Set true to map with wildcard",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_counter",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 6
            },
            "end": {
              "line": 64,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "_mapDefinition",
          "type": "Array | null | undefined",
          "description": "Mapping Definitions",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "map",
          "description": "Mapping function\nto use with flowbased wires",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventDetails"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 2
            },
            "end": {
              "line": 93,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addConfigMap",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mapItems"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addMap",
          "description": "Maps registrieren",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "target"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_applyMapping",
          "description": "Internal mapping function",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 2
            },
            "end": {
              "line": 143,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "sourceObj"
            },
            {
              "name": "_counter",
              "description": "map counter"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_appendPart",
          "description": "Rekursive Funktion um deep mapping Objekte vorzubereiten",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 2
            },
            "end": {
              "line": 162,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            },
            {
              "name": "parts"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_mapObject",
          "description": "interne mapper Funktion",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 170,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            }
          ],
          "return": {
            "type": "{}"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 196,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "MapStruct",
      "attributes": [
        {
          "name": "source",
          "description": "Source object",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "target",
          "description": "Mapped object",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "mapping-config",
          "description": "Eine config kann auch direkt übergeben werden\nGeeignet für dynamische item Mappings\n\n```\n[\n {\n    \"source\": \"name\",\n    \"target\": \"headline\"\n },\n]\n```",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 55,
              "column": 61
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "with-wildcard",
          "description": "Set true to map with wildcard",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "object-mapped",
          "description": "Fired when an object mapping has finished\ndetail payload: target with mapped data",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "target-changed",
          "description": "Fired when the `target` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "map-struct"
    },
    {
      "description": "`<map-struct-item>` ist eine Mapping-Anweisung für ein Attribut.",
      "summary": "",
      "path": "map-struct-item.js",
      "properties": [
        {
          "name": "source",
          "type": "string | null | undefined",
          "description": "Attribute path of source attribute\nvalue.iconCode",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 19,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "target",
          "type": "string | null | undefined",
          "description": "Attribute path of target attribute\nicon",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_init",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 2
            },
            "end": {
              "line": 40,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "source"
            },
            {
              "name": "target"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 9,
          "column": 0
        },
        "end": {
          "line": 41,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "MapStructItem",
      "attributes": [
        {
          "name": "source",
          "description": "Attribute path of source attribute\nvalue.iconCode",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 19,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "target",
          "description": "Attribute path of target attribute\nicon",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "map-struct-item"
    },
    {
      "description": "`prop-to-event`\nis a compatibility component for p3 to furo/fbp. It converts a property to an event (`update`).\n\n\n```\n<prop-to-event property=\"[[item.links]]\" @-update=\"--hts\"></prop-to-event>\n```",
      "summary": "",
      "path": "prop-to-event.js",
      "properties": [
        {
          "name": "property",
          "type": "Object | null | undefined",
          "description": "property to convert",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_toEvent\"",
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_toEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 2
            },
            "end": {
              "line": 40,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 42,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "PropToEvent",
      "attributes": [
        {
          "name": "property",
          "description": "property to convert",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 27,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "update",
          "description": "update\nFired when property was updated\ndetail payload: {Object} property",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "prop-to-event",
      "mixins": [
        "FBP"
      ]
    }
  ]
}
